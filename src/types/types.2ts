export type CategoryPage = {
    alias: string
    contents(first: number, offset: number): ContentEdge
    id: string
    name: string
    priority: string
    type: string
}

export type ContentEdge = {
    contents: Content[]
    count: string
    hasNextPage: boolean
}

export type Content = {
    description: string
    id: string
    link: string
    localizations(lang: string[]): I18nContent[]
    metaContentParams: MetaContentParam[]
    name: string
    previews: Preview[]
    priority: number
    protected: boolean
    tags: Tag[]
    type: string
}

type Preview = {
    id: string
    link: string
    priority: string
    type: string
}

type Tag  = {
    contents(first: number, offset: number): ContentEdge
    displayName: string
    id: string
    localizations(lang: string[]): I18nTag[]
    name: string
    priority: string
}

type MetaContentParam =  {
    id: string
    localizations(lang: string[]): I18nMetaContentParam[]
    paramName: string
    value: string
}

type I18nMetaContentParam = {
    id: string
    lang: string
    value: string
}

type I18nTag = {
    displayName: string
    id: string
    lang: string
}


type I18nCategory = {
    id: string
    lang: string
    name: string
}

type I18nContent = {
    description: string
    id: string
    lang: string
    link: string
    name: string
}

type Service = {
    alias: string
    categories: CategoryPage[]
    flowURL: String
    id: string
    name: string
    sskey: string
}

type Query = {
    category(id: string): CategoryPage
    compact: Service
    content(id: string): Content
    searchContentByName(first: number, name: string, offset: number): ContentEdge
    searchContentByTag(first: number, offset: number, tagName: string): ContentEdge
    tag(id: string): Tag
}
